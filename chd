#!/bin/bash

###
### Handle any input errors.
###

# If $1 is null then echo error and exit.
if [ -z $1 ]; then

	echo "No directory provided."
	echo "Use 'chd help' for a usage guide."
	return

fi

# If $2 is not null then...s
if [ ! -z $2 ]; then

	if [ $1 != "add" ] && [ $1 != "delete" ]; then # If $1 is not add or delete then echo error and exit.

        echo "$1 is not a valid command. Use 'chd help' to get a usage guide."
        return
	
	fi

	if [ -z $3 ] && [ $1 == "add" ]; then

		echo "No directory provided for add. Use 'chd help' to get a usge guide."
		return

	fi

else

	if [ $1 == "add" ] || [ $1 == "delete" ]; then

		echo "Ivalid use of the $1 command. Use 'chd help' to get a usage guide."
		return

	fi

fi

# If $3 is not null then if it's not a directory then echo error and exit.
if [ ! -z $3 ]; then

	if [ $1 == "delete" ]; then

		echo "Ivalid use of the $1 command. Use 'chd help' to get a usage guide."
		return

	fi
		
	if [ ! -d $3 ]; then # If $3 is not a directory then echo error and exit.

		echo "'$3' is not a valid directory."
		echo "Use 'chd help' for a usage guide."
		return

	fi

fi

if [ ! -z $4 ]; then

	echo "Ivalid use of the $1 command. Use 'chd help' to get a usage guide."
	return

fi



###
### Handle valid inputs
###

length=$(wc -l < chdlist) # Get the length of the directory list.

if [ $length == 0 ] && [ $1 != "add" ] && [ $1 != "help" ]; then # If the length of the directory list is 0 then echo error and exit.

	echo "No directories set. See 'chd help' on how to add directories."
	return

elif [ $1 == "list" ]; then # If $1 is list then echo the supported directories.

	i=0 # Incrimentor variable

	echo "---------------------"
	echo "Supported Directories"
	echo "---------------------"

	for val in $(<chdlist) 	# Loop to search for the directory.
	do
		if ! (($i % 2)); then # If directory found then set found to true and loop one more time to get the directory location.

			direc="$val:" # Get the directory name when even.

		else

			echo "$direc $val" # When odd echo the directory and it's location.

		fi

		i=$(($i + 1)) # Incriment i.
	done 

	echo "---------------------"

elif [ $1 == "help" ]; then # If $1 is help then echo out a usage guide.

	echo "This command is used to shorten 'cd' to certain directories."
	echo "It is used by specifying a directory after chd: 'chd directory'"
	echo "A list of valid directories can be viewed with: 'chd list'"
	echo "Directories can be added with 'chd add name directory':"
	echo "chd add space ~/Documents/space"
	echo "Now 'chd space' will cd to the directory '~/Documents/space'"
	echo "Directories can be deleted with: 'chd delete name'"
	echo "chd delete space"

elif [ $1 == "add" ]; then

	i=0

	for val in $(<chdlist) 	# Loop to search for the directory.
	do
		if ! (($i % 2)); then # If directory found then set found to true and loop one more time to get the directory location.

			if [ $2 == $val ]; then

				echo "$2 is already in use as a directory name."
				echo "Use a different name for the directory: '$3'"
				return

			fi

			tmp=$val

		else

			if [ $3 == $val ]; then

				echo "'$3' is already listed under the directory name: $tmp."
				read -p "Would you like to have it under both names? (Y/N): " response

				if [ ${response,,} != "y" ] && [ ${response,,} != "yes" ]; then


					echo "'$3' not created under the name $2."
					return

				fi

			fi

		fi

		i=$(($i + 1)) # Incriment i.
	done 

	stordir="$2 $3" # Seperate the directory name and location by a space.

	echo $stordir >> chdlist # Store them into chdlist.

	echo "You may now use 'chd $2' to cd to '$3'"

else # Else...

	found=false # Use to tell if directory exists.

	for val in $(<chdlist) 	# Loop to search for the directory.
	do
		if [ $val == $1 ]; then # If directory found then set found to true and loop one more time to get the directory location.

			found=true

		elif $found; then # If directory found then...

			val="cd $val" # Add 'cd ' infront of $val.
			eval $val # Evaluate $val without any quotes. (This changes to the specified directory.)
			break # Break the loop.

		fi
	done 

	if ! $found; then # If the directory was not found then echo error and exit.

		echo "$1 is not a supported directory. See directories with 'chd list'."
		return

	fi

fi
